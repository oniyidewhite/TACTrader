name: Deploy TacTrader Service

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy TacTrader service
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to Amazon ECR
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tactrader
          IMAGE_TAG: latest
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          
          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Output the image URI
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Retrieve ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition tactrader-task --query taskDefinition > task-definition.json

      - name: Update ECS task definition with new image
        id: update-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: tactrader
          image: ${{ steps.build-and-push.outputs.image }}

      - name: Deploy updated ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.update-task.outputs.task-definition }}
          service: prod-tactrader
          cluster: prod
          wait-for-service-stability: true